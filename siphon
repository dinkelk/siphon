#!/bin/sh

###############################################
# Global definitions:
###############################################

temp_prefix=".siphon."

get_session_number()
{
  awk -v min=0 -v max=999999 'BEGIN{srand(); print int(min+rand()*(max-min+1))}'
}

get_temp_dir()
{
  session=$1
  if [ -n "$TMPDIR" ] 
  then
    echo "$TMPDIR/siphon/$session"
  else
    echo "/tmp/siphon/$session"
  fi
}


###############################################
# Print functions:
###############################################

# Color output:
RED='\033[31m'
GREEN='\033[32m'
CYAN='\033[36m'
YELLOW='\033[33m'
BOLD='\033[1m'
NC='\033[0m' # No Color

print_()
{
  if [ -n "$color" ]
  then
    format="$1"
    echo $format"[`get_time`]$NC $@"$NC
  else
    echo "[`get_time`] $@"
  fi
}
get_time()
{
  date +"%m-%d-%y %H:%M:%S"
}
print_status()
{
  if [ -n "$color" ]
  then
    print_ "" $BOLD"$@"
  else
    print_ "$@"
  fi
}
print_copy()
{
  filename="$1"
  if [ -n "$color" ]
  then
    print_ $CYAN "copying  $BOLD$filename"
  else
    print_ "copying  $filename"
  fi
}
print_copy_finished()
{
  filename="$1"
  if [ -n "$color" ]
  then
    print_ $GREEN "copied   $BOLD$filename"
  else
    print_ "copied   $filename"
  fi
}
print_warning()
{
  if [ -n "$color" ]
  then
    print_ $YELLOW "$@"
  else
    print_ "$@"
  fi
}
print_copy_warning()
{
  filename="$1"
  if [ -n "$color" ]
  then
    print_warning "warning  $BOLD$filename - $@"
  else
    print_warning "warning  $filename - $@"
  fi
}
print_error()
{
  if [ -n "$color" ]
  then
    print_ $RED$BOLD "$@"
  else
    print_ "$@"
  fi
}
print_copy_error()
{
  filename="$1"
  if [ -n "$color" ]
  then
    print_error "error    $BOLD$filename - $@"
  else
    print_error "error    $filename - $@"
  fi
}

###############################################
# Parse input:
###############################################

print_usage()
{
  echo "Usage: siphon [-h?ndDt:] [username@hostname:]/path/to/source [[username@hostname:]/path/to/destination]"
  echo "Options: -t time interval in seconds to wait between copying new files"
  echo "         -d delete remote files after copying"
  echo "         -n disable color output"
  echo "         -h print usage"
  echo "         -D show debug prints"
}

if [ $# -lt 1 ]
then
  print_usage
  exit 1
fi

# Argument parsing:
# Good example here: 
# http://stackoverflow.com/questions/192249/how-do-i-parse-command-line-arguments-in-bash
# A POSIX variable
OPTIND=1 # Reset in case getopts has been used previously in the shell.

# Initialize our own variables:
delete_remote=
debug=
color="Y"
time_interval="60"

# Parse options:
while getopts "h?ndDt:" opt; do
  case "$opt" in
    h|\?)
      print_usage
      exit 0
      ;;
    t)  time_interval=$OPTARG
      ;;
    d)  delete_remote="Y"
      ;;
    n)  color=
      ;;
    D)  debug="Y"
      ;;
    *) 
      echo "Invalid option '$opt'"
      print_usage
      exit 1
  esac
done
shift $((OPTIND-1))
[ "$1" = "--" ] && shift

# Return true if a string contains a substring:
contains()
{
  string=$1
  substring=$2
  case "$string" in 
    *$substring*)
       return 0
       ;;
  esac
  return 1
}

# Parse input:
src=$1
src_username=
src_hostname=
src_remote=
if contains $src "@";
then
  src_username=`echo "$src" | cut -d "@" -f 1`
  remainder=`echo "$src" | cut -d "@" -f 2`
  src_hostname=`echo "$remainder" | cut -d ":" -f 1`
  remainder=`echo "$remainder" | cut -d ":" -f 2`
  src_port=`echo "$remainder" | tr "~" "/" | cut -d "/" -f 1`
  if [ -n "$src_port" ] 
  then
    port_length=`echo $src_port | wc -c`
    src_dir=`echo $remainder | cut -c $port_length-`
  else
    src_dir=$remainder
  fi
  src_remote="TRUE"
else
  src_dir=$src
fi

dest=$2
dest_username=
dest_hostname=
dest_remote=
if [ -z "$dest" ] 
then
  dest_dir="."
else
  if contains $dest "@";
  then
    dest_username=`echo "$dest" | cut -d "@" -f 1`
    remainder=`echo "$dest" | cut -d "@" -f 2`
    dest_hostname=`echo "$remainder" | cut -d ":" -f 1`
    remainder=`echo "$remainder" | cut -d ":" -f 2`
    dest_port=`echo "$remainder" | tr "~" "/" | cut -d "/" -f 1`
    if [ -n "$dest_port" ] 
    then
      print_error "Destination ports other than the default are not supported by siphon."
      exit 1
    else
      dest_dir=$remainder
    fi
    dest_remote="TRUE"
  else
    dest_dir=$dest
  fi
fi

# Get session number and temporary directory:
session=`get_session_number`
temp_dir=`get_temp_dir $session`
mkdir -p $temp_dir

###############################################
# Helper functions:
###############################################

run_src()
{
  if [ -n "$src_remote" ]
  then
    if [ -n "$src_port" ] 
    then
      ssh -p $src_port $src_username@$src_hostname "$@"
    else
      ssh $src_username@$src_hostname "$@"
    fi
  else
    eval "$@"
  fi
}

run_dest()
{
  if [ -n "$dest_remote" ]
  then
    if [ -n "$dest_port" ] 
    then
      ssh -p $dest_port $dest_username@$dest_hostname "$@"
    else
      ssh $dest_username@$dest_hostname "$@"
    fi
  else
    eval "$@"
  fi
}

list_src_files()
{
  run_src "ls -1 $src_dir"
}

list_dest_files()
{
  run_dest "ls -1 $dest_dir"
}

list_new_files()
{
  src_temp_file="$temp_dir/remote.temp"
  dest_temp_file="$temp_dir/local.temp"
  list_src_files > $src_temp_file || return 1
  list_dest_files > $dest_temp_file || return 1
  # Diff the local vs remote file and extract
  diff $dest_temp_file $src_temp_file | awk '/^\>.*$/ { s = $2; for (i = 3; i <= NF; i++) s = s " " $i; print s }'
  rm -f $dest_temp_file $src_temp_file
}

get_src_filepath()
{
  src_filename="$@"
  if [ -n "$src_remote" ]
  then
      echo "$src_username@$src_hostname:\"'$src_filename'\""
  else
      echo \"$src_filename\"
  fi
}

get_dest_filepath()
{
  dest_filename="$@"
  if [ -n "$dest_remote" ]
  then
      echo "$dest_username@$dest_hostname:\"'$dest_filename'\""
  else
      echo \"$dest_filename\"
  fi
}

get_src_pretty_path()
{
  if [ -n "$src_remote" ]
  then
    echo "$src_username@$src_hostname:$src_port$src_dir"
  else
    echo "$src_dir"
  fi
}

get_dest_pretty_path()
{
  if [ -n "$dest_remote" ]
  then
    echo "$dest_username@$dest_hostname:$dest_port$dest_dir"
  else
    echo "$dest_dir"
  fi
}

copy_src_file()
{
  filename="$1"
  print_copy "$filename"

  # Get the source filepath:
  src_filename="$src_dir/$filename"
  src_filepath="`get_src_filepath $src_filename`"

  # Get the destination filepath:
  dest_filename="$dest_dir/$filename"
  temp_filename="$dest_dir/$temp_prefix$filename"
  temp_filepath="`get_dest_filepath $temp_filename`"

  # Make sure the file doesn't already exist in the destination:
  if [ -e "$dest_filename" ] || [ -d "$dest_filename" ]
  then
    print_copy_warning $filename "already exists, not overwriting."
    return 0
  fi

  # Figure out which copy command to use:
  if [ -n "$src_remote" ] || [ -n "$dest_remote" ]
  then
    if [ -n "$src_port" ] 
    then
      cmd="scp -r -P $src_port"
    else
      cmd="scp -r"
    fi
  else
    cmd="cp -r"
  fi

  # Copy the file:
  if [ -n "$debug" ]
  then
    echo "$cmd $src_filepath $temp_filepath"
  fi
  eval "$cmd $src_filepath $temp_filepath > /dev/null" || return 1

  # Atomically copy over the new file from the temp
  run_dest "mv \"$temp_filename\" \"$dest_filename\"" || return 1

  # Remove the remote file
  if [ -n "$delete_remote" ] 
  then
    run_src "rm -rf $src_filename" || return 1
  fi

  print_copy_finished "$filename"
}

copy_src_files()
{
  new_files=`list_new_files`
  if [ "$?" -ne "0" ]
  then
    print_error "No such file or directory - source: '$src_dir' or destination: '$dest_dir'"
    exit 1
  fi

  list_new_files | while read p; do
    copy_src_file "$p"
  done
}

cleanup()
{
  rm -rf "$temp_dir"
  if [ -z "$dest_remote" ]
  then
    rm -rf "$dest_dir/$temp_prefix*"
  fi
}

###############################################
# Main:
###############################################

# Register the signal handler
trap 'cleanup; exit 0' HUP INT TERM

src_to_print=`get_src_pretty_path`
dest_to_print=`get_dest_pretty_path`

print_status "Siphoning files from '$src_to_print' to '$dest_to_print'"
print_status "Use ctrl+c to exit..."

# Copy remote files forever:
last_time="0"
while [ 1 ]
do
  current_time=`date +%s`
  time_diff=`expr $current_time - $last_time`
  
  # If enough time has elapsed... copy new files:
  if [ "$time_diff" -ge "$time_interval" ]
  then
    copy_src_files || exit 1
    last_time=$current_time
  # Not enough time has elapsed... sleep:
  else
    time_to_sleep=`expr $time_interval - $time_diff`
    sleep $time_to_sleep
  fi
done
